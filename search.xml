<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《AI工具进化论：Cursor与MCP生态探索》</title>
      <link href="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/"/>
      <url>/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/</url>
      
        <content type="html"><![CDATA[<p>AI工具的发展速度十分迅速，2023年,大家还在聊ChatGPT能跟我们对话的事儿，可现在呢？AI已经能自己操作工具、上网、改代码，进入了“智能体”（Agent）的阶段。这种变化不只是“能动”和“不能动”的简单区别，它意味着AI正在变成一个真正的智能助手，而不只是个聊天工具。作为一个喜欢折腾新技术的人，我最近花了点时间研究了MCP协议，特别是Cursor编辑器是怎么用它的。这篇文章就是我这段时间的一些心得体会。</p><h3 id="一、AI能力进化的三个阶段"><a href="#一、AI能力进化的三个阶段" class="headerlink" title="一、AI能力进化的三个阶段"></a>一、AI能力进化的三个阶段</h3><p>AI工具的能力进化可以清晰地划分为三个递进的阶段：</p><p><strong>Chat阶段（对话型）</strong>：这是我们最为熟悉的AI形态。在这一阶段，AI仅能提供文本建议，所有实际操作都需要人类手动执行，如复制粘贴代码或根据建议进行修改。AI更像是一个被动的顾问。</p><p><strong>Composer阶段（创作型）</strong>：在这一阶段，AI开始具备有限的自主行动能力。例如，Cursor编辑器可以直接修改代码文件，但这些操作仍然需要人类的参与和确认，且功能范围相对有限。</p><p><strong>Agent阶段（智能体）</strong>：这代表了当前AI发展的前沿。Agent是具有较高自主性的程序，理论上能够独立完成从需求分析、设计图解读、代码生成、调试到最终部署的完整工作流程。MCP协议正是为解决这一阶段的技术挑战而生。</p><h3 id="二、Agent的进化"><a href="#二、Agent的进化" class="headerlink" title="二、Agent的进化"></a>二、Agent的进化</h3><p>AI Agent的技术基础也在不断演进。最早是OpenAI推出的Function Calling功能，它允许模型调用预定义的函数来获取信息或执行操作。</p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/Function-Calling.png"></p><p>但是,如果项目需求多个函数,函数的编写就会变得复杂且累赘,大模型调用函数的过程也会非常臃肿.</p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/Function-Calling%E7%9A%84%E5%A4%8D%E6%9D%82.png"></p><p>近期，Anthropic公司推出的MCP（Model Context Protocol）协议带来了重要突破，它进一步扩展和优化了AI与外部世界的交互能力。</p><p><strong>MCP协议规定了模板与提示词格式,让MCP服务器可以被复用,解决了Function Calling的痛点.</strong></p><h3 id="三、MCP核心概念解析"><a href="#三、MCP核心概念解析" class="headerlink" title="三、MCP核心概念解析"></a>三、MCP核心概念解析</h3><h4 id="MCP的本质与核心价值"><a href="#MCP的本质与核心价值" class="headerlink" title="MCP的本质与核心价值"></a>MCP的本质与核心价值</h4><p>MCP（Model Context Protocol）是一种专为连接大型语言模型与外部工具、数据源而设计的协议标准。它的核心价值在于：</p><p>它在技术架构上定义了一个智能中间层。以MCP-Github为例，该中间层调用Github的API服务，并对这些API进行了语义层面的”翻译”，使AI能够理解如何正确地使用这些接口。</p><p>MCP协议在AI模型与外部数据（包括本地文件系统和互联网资源）之间构建了一座双向通信的桥梁。任何支持MCP客户端的AI模型都能通过这一协议扩展其交互能力。</p><h4 id="MCP的五大核心组件："><a href="#MCP的五大核心组件：" class="headerlink" title="MCP的五大核心组件："></a>MCP的五大核心组件：</h4><p><strong>MCP主机（MCP Hosts）</strong>：负责启动MCP客户端的AI应用环境，如Cursor编辑器。它提供了运行MCP客户端的基础设施。</p><p><strong>MCP客户端（MCP Clients）</strong>：在主机程序内部运行，与MCP服务器保持一对一的连接关系。它负责将AI的指令转发给服务器并接收返回结果。</p><p><strong>MCP服务器（MCP Servers）</strong>：作为实现AI智能体自动化能力的核心中间层，它向AI智能体提供可用服务、可调用API以及可访问数据源的完整信息，使AI能够做出合理的调用决策并执行相应功能。</p><p><strong>本地资源（Local Resources）</strong>：指本地计算机中可被MCP服务器安全访问的资源，包括文件系统、数据库等。</p><p><strong>远程资源（Remote Resources）</strong>：MCP服务器可以连接的各类远程服务和数据源，典型的如各种Web API。</p><p>这套精心设计的架构体系为AI工具提供了与外部世界更灵活、更安全的交互机制，为真正自主的AI助手奠定了技术基础。</p><blockquote><ul><li>使用MCP协议的前提是找到支持的MCP主机与MCP客户端</li><li>并非所有大语言模型都支持MCP协议，例如DeepSeek官方版本就不支持</li><li>有趣的是，火山引擎版的DeepSeek似乎提供了支持：<a href="https://linux.do/t/topic/501262/7">https://linux.do/t/topic/501262/7</a></li><li>参考<code>https://linux.do/t/topic/500666/8</code>的讨论，MCP的技术实现比表面看起来更为复杂，似乎IDE&#x2F;AI工具对MCP协议的支持更为重要</li></ul></blockquote><h3 id="四、Cursor与MCP的结合实践"><a href="#四、Cursor与MCP的结合实践" class="headerlink" title="四、Cursor与MCP的结合实践"></a>四、Cursor与MCP的结合实践</h3><h4 id="为什么选择Cursor-0-46版本"><a href="#为什么选择Cursor-0-46版本" class="headerlink" title="为什么选择Cursor 0.46版本"></a>为什么选择Cursor 0.46版本</h4><p>使用Cursor是要付费的,而”无限续杯”只在特定的版本能够进行.如果你开通了Cursor Pro,那么使用最新版毫无压力.而如果像我一样需要”免费”版,那就必须了解Cursor特定版本的区别：</p><blockquote><p><code>免费续杯</code>脚本默认为:<a href="https://github.com/yuaotian/go-cursor-help">https://github.com/yuaotian/go-cursor-help</a>  由于本质是改机器码，所以我猜测不同脚本的差异不大.</p></blockquote><p>0.44:最稳定白嫖的版本，但是不支持MCP协议.</p><p>0.46:喜欢”自动更新”,必须要用<code>https://blog.csdn.net/qq_42944740/article/details/144810727</code>中的方法，才能让它停止。其次，它支持MCP协议,但是有很多坑…</p><p>0.47:不仅支持MCP协议,而且配置简单。但是它多了一个所谓的<code>Claude3.7Max版</code>需要<code>付费调用</code>.</p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/%E4%BB%98%E8%B4%B9%E8%B0%83%E7%94%A8%E7%9A%843.7.png"></p><p>综合考虑,我选择通过0.46版进行MCP服务器的体验.[如果你也选择0.46,那么请留意这些Issue中的宝贵经验:]</p><pre class="line-numbers language-none"><code class="language-none">Cursor 0.46版免费使用技巧:1、完全退出Cursor、注销账号、在官网Setting中彻底删除账号【关键步骤】2、更换网络节点IP，建议尝试日本、新加坡、美国或香港节点，优先选择低延迟的线路3、执行机器码刷新脚本（见下方命令）4、重新注册账号并登录Cursor5、如遇注册或使用问题，可能是浏览器被风控，建议使用支持随机指纹生成的浏览器执行命令：irm https:&#x2F;&#x2F;aizaozao.com&#x2F;accelerate.php&#x2F;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;yuaotian&#x2F;go-cursor-help&#x2F;refs&#x2F;heads&#x2F;master&#x2F;scripts&#x2F;run&#x2F;cursor_win_id_modifier.ps1 | iex注意事项：- 建议使用Gmail邮箱注册- 每个邮箱每天限定绑定一个IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Cursor-0-46版本下的MCP实战体验"><a href="#Cursor-0-46版本下的MCP实战体验" class="headerlink" title="Cursor 0.46版本下的MCP实战体验"></a>Cursor 0.46版本下的MCP实战体验</h4><p>MCP服务器的配置可参考这篇详细教程：<a href="https://zhuanlan.zhihu.com/p/25728705136">https://zhuanlan.zhihu.com/p/25728705136</a></p><p>在Cursor 0.46版本中，MCP服务器的集成方式较为特殊。与更高版本通过配置文件安装不同，0.46版本对通过npx安装的MCP服务器支持不够完善，往往需要额外的配置步骤才能正常使用。</p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/%E6%97%A7MCP.png" alt="0.46版本MCP界面"></p><p>为了测试MCP的实际能力，我尝试让Cursor帮助解析人脸识别API文档：<a href="https://console.faceplusplus.com.cn/documents/4888373">https://console.faceplusplus.com.cn/documents/4888373</a></p><p>首先测试的是<strong>Fetch</strong>服务器(@modelcontextprotocol&#x2F;server-fetch)。结果发现它仅提供基础爬虫功能，无法处理需要JavaScript渲染的页面，功能过于简单。</p><p>接着尝试了<strong>MCP-playwright</strong>(@executeautomation&#x2F;playwright-mcp-server)，但遇到了版本兼容性问题：</p><blockquote><p>服务器要求Firefox 1475版，而我本地安装的是1471版。多次尝试更新playwright和MCP-playwright都无法解决版本差异问题。考虑到更新playwright可能影响其他项目，决定放弃这一方案。</p></blockquote><p>另一个playwright版本的MCP服务器虽然成功启动了Node命令行，但Cursor的MCP界面显示红色错误提示<code>MCP Client构建失败</code>，无法正常使用。</p><p>最后尝试的是<strong>MCP-puppeteer</strong>(@modelcontextprotocol&#x2F;server-puppeteer)，虽然能够启动，但发现网页加载存在严重问题：AI无法自动访问目标网站，必须通过手动在弹出的浏览器中打开新标签页才能访问API文档。</p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD.png" alt="自动加载失败"></p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/%E5%8F%AF%E4%BB%A5%E5%8A%A0%E8%BD%BD.png" alt="手动加载成功"></p><p>我猜测是浏览器请求头之类的问题。可能还要自己修改server-puppeteer\dist\index.js，去修正<code>LLM大模型</code> 跟 <code>浏览器</code> 的交互。</p><p><img src="/2025/03/19/ai-gong-ju-jin-hua-lun-cursor-yu-mcp-sheng-tai-tan-suo/%E4%B8%AD%E9%97%B4%E5%B1%82.png" alt="中间层代码示例"></p><p>这堆玩意看得我头疼，我还没做好折腾MCP服务器的准备呢，这次体验就到此为止吧。</p><h3 id="五：个人实践总结"><a href="#五：个人实践总结" class="headerlink" title="五：个人实践总结"></a>五：个人实践总结</h3><p>MCP协议代表了AI智能体发展的一个重要方向，但当前的生态系统仍处于早期阶段，面临诸多挑战：</p><ol><li><strong>生态不完善</strong>：现有MCP服务器可能存在各种bug和兼容性问题，不一定能做到<code>开箱即用</code>。</li><li><strong>技术门槛高</strong>：在上一个前提下，要充分发挥MCP的潜力，用户需要深入理解协议细节并能够自行修改配置，这对普通用户较为困难。</li><li><strong>中间层质量参差不齐</strong>：MCP服务器的质量高度依赖开发者对协议的理解和实现水平，市场上的方案质量差异明显。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MCP协议 </tag>
            
            <tag> 技术探索 </tag>
            
            <tag> 注意时效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序逆向：从解包到自动化</title>
      <link href="/2025/03/05/wei-xin-xiao-cheng-xu-ni-xiang-cong-jie-bao-dao-zi-dong-hua/"/>
      <url>/2025/03/05/wei-xin-xiao-cheng-xu-ni-xiang-cong-jie-bao-dao-zi-dong-hua/</url>
      
        <content type="html"><![CDATA[<p>重装博客系统后,目前只有内容截图,等源文件中…</p><p><img src="/2025/03/05/wei-xin-xiao-cheng-xu-ni-xiang-cong-jie-bao-dao-zi-dong-hua/%E5%9B%BE%E7%89%87.jpeg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 注意时效 </tag>
            
            <tag> 特殊格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POC狩猎指南：从收集到利用的完整攻略</title>
      <link href="/2025/03/05/poc-shou-xi-zhi-nan-cong-shou-ji-dao-li-yong-de-wan-zheng-gong-lue/"/>
      <url>/2025/03/05/poc-shou-xi-zhi-nan-cong-shou-ji-dao-li-yong-de-wan-zheng-gong-lue/</url>
      
        <content type="html"><![CDATA[<p>排队中…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>漏洞盒子自动化脚本深度改造，效率提升10000%！</title>
      <link href="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/"/>
      <url>/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/</url>
      
        <content type="html"><![CDATA[<p>2月份折腾了好一会，也是成功挖到260+漏洞，可问题是，这些漏洞该怎么提交呢？</p><p>写报告、搜集公司归属、整理渗透图片…一个漏洞至少折腾10分钟，260+个漏洞就要花费43个小时。</p><p>按每天工作8小时计算，差不多要连续奋战5.375天😅</p><p>好在之前我就已经找到了一个《漏洞盒子自动化脚本3.0》，还没用上呢，最近查找的时候，发现又多了一个<a href="https://www.freebuf.com/sectool/419104.html">漏洞盒子批量提交脚本5.1.26 - FreeBuf网络安全行业门户</a>   ok，那么开始使用。</p><h3 id="修改前——脚本的不便"><a href="#修改前——脚本的不便" class="headerlink" title="修改前——脚本的不便"></a>修改前——脚本的不便</h3><p>但这个脚本用起来，并没有我想象中的那么美好😭：</p><ul><li><strong>每一个厂商信息需要手动查询</strong>：<code>所属地区</code>跟<code>行业</code>的处理浪费不少时间。[每漏洞&#x2F;2~3分钟]</li><li><strong>漏洞图片需要自己截图</strong>：并且还要放在指定文件夹中。文件多起来后，管理起来相当痛苦。[每漏洞&#x2F;1~3分钟] (而且文件越多越麻烦)</li><li><strong>太多需要手动处理的杂事</strong>：权重需要自己查，有权重的还需要单独处理；对XML格式没有兼容，直接上传会转义…</li></ul><p>于是，我决定在这个脚本的基础上，加入”一些东西”，经过N个版本的迭代，总算是做出一款<strong>只需要10~20分钟的半自动化部分，就能处理任意漏洞量的”效率更高的半自动化脚本”</strong></p><h3 id="魔改特色"><a href="#魔改特色" class="headerlink" title="魔改特色"></a>魔改特色</h3><ul><li><strong>图片自动处理</strong>：利用Pillow库与playwright库，实现全自动图片生成和处理。</li></ul><blockquote><p> 2~3分钟就能处理700+张照片，效率提升70000%！图片越多，提升效果越明显。</p></blockquote><ul><li><strong>工作流程化</strong>：批量收集信息、批量处理信息，流水线作业提升效率。</li><li><strong>智能匹配系统</strong>：使用<code>cpca</code>库与<code>fuzzywuzzy</code>库，自动匹配所属地区和行业，让繁琐的分类工作变得轻松。</li><li><strong>修复兼容问题</strong>：解决了复现过程中对&lt;&gt;符号的转义问题，不再出现格式混乱。</li><li><strong>异步处理与纠错机制</strong>：在提升处理速度的同时，增加了容错能力，让脚本更加稳定可靠。</li></ul><h3 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h3><h5 id="①：准备漏洞基础信息"><a href="#①：准备漏洞基础信息" class="headerlink" title="①：准备漏洞基础信息"></a><strong>①：准备漏洞基础信息</strong></h5><p>首先，需要在mid-bug表中填入漏洞的基本信息。必需的信息包括：URL（漏洞点的url）、请求包、响应包、漏洞类型。</p><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/mid-bug%E7%9A%84%E6%A0%BC%E5%BC%8F.png"></p><ul><li>如果是sql注入，把影响参数填一下</li><li>“漏洞类型”指：sql注入、xxx公司xxxx处存在xxx漏洞，只要自己能识别就行</li></ul><p>推荐：使用Yakit的WebFuzzer进行发包（这样才有请求包与响应包），然后在History中，搜索并筛选出命中漏洞同时导出。</p><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/Yakit%E7%9A%84History.png"></p><h5 id="②：配置基本信息"><a href="#②：配置基本信息" class="headerlink" title="②：配置基本信息"></a>②：配置基本信息</h5><p>填写config.yaml，确定漏洞的基本参数。<strong>最重要的一点是，确定这个漏洞需要提交几张图片</strong>。如果需要调整，记得在photo函数中同步修改代码。</p><blockquote><p>默认情况下，系统会生成这3张图：归属图、漏洞主页图、poc图</p></blockquote><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/config%E7%9A%84%E9%83%A8%E5%88%86%E7%9C%9F%E5%AE%B9.png" alt="config.yaml的部分真容"></p><h5 id="③：自动生成基础数据"><a href="#③：自动生成基础数据" class="headerlink" title="③：自动生成基础数据"></a>③：自动生成基础数据</h5><p>运行main-产出表.py，通过basic_process函数处理，让mid-bug表<strong>自动</strong>获得漏洞id、漏洞主页和根域名信息。</p><h5 id="④：获取网站信息"><a href="#④：获取网站信息" class="headerlink" title="④：获取网站信息"></a>④：获取网站信息</h5><p>此时会弹出指引，要求使用[爱站网]，通过根域名，去得到权重、备案号、公司(False)，<strong>并手动</strong>添加到mid-bug中并进行处理。<a href="https://pl.aizhan.com/">站长工具_网站综合批量查询_爱站网</a></p><ul><li>如果有权重，那么在特殊一栏填写权重。</li><li>备案号为空的行，直接删除。</li><li>如果有重复的公司，只保留其中一行。</li></ul><h5 id="⑤：公司信息处理"><a href="#⑤：公司信息处理" class="headerlink" title="⑤：公司信息处理"></a>⑤：公司信息处理</h5><p>确认后，程序会进入enscan函数，<strong>自动</strong>读取mid-bug表，并将公司信息输出到output_data文件夹；接着调用行业模糊匹配函数，处理最新的行业信息表。</p><h5 id="⑥：手动校正地区信息"><a href="#⑥：手动校正地区信息" class="headerlink" title="⑥：手动校正地区信息"></a><strong>⑥：手动校正地区信息</strong></h5><p>接下来，行业信息表还需要一点手动调整 —— <strong>找到省市中标记为”未知”的部分，手工查询并更新。</strong></p><h5 id="⑦：合并数据"><a href="#⑦：合并数据" class="headerlink" title="⑦：合并数据"></a>⑦：合并数据</h5><p>确认无误后，运行company_info函数，系统会<strong>自动</strong>将行业信息表与mid-bug表合并，为mid-bug表添加公司（True）、省市位置、粗分行业、细分行业等信息。</p><h5 id="⑧：图片处理"><a href="#⑧：图片处理" class="headerlink" title="⑧：图片处理"></a>⑧：图片处理</h5><p>进入photo函数阶段，这里的POC证明图<strong>可能需要根据漏洞类型调整所需信息</strong>。例如，对于延时注入漏洞，POC证明图中应该包含延迟(ms)信息。</p><blockquote><p>比如最简单的，把一张固定的图片复制到所有文件夹中。</p></blockquote><h5 id="⑨：执行最终提交"><a href="#⑨：执行最终提交" class="headerlink" title="⑨：执行最终提交"></a>⑨：执行最终提交</h5><p>系统会<strong>自动</strong>将带有权重标记的行提取到新表中，并从mid-bug表中删除这些行。检查config.yaml配置无误后，<strong>手动</strong>运行main-提交漏洞.py。</p><h5 id="⑩：审核与提交"><a href="#⑩：审核与提交" class="headerlink" title="⑩：审核与提交"></a>⑩：审核与提交</h5><p>使用草稿模式检查是否有问题，确认无误后直接提交。</p><h5 id="zero：清理临时文件"><a href="#zero：清理临时文件" class="headerlink" title="zero：清理临时文件"></a>zero：清理临时文件</h5><p>最后手动删除output_data中的旧的行业信息表与已提交过的images，保持工作区整洁。</p><blockquote><p><strong>别被这些步骤给吓到，看起来步骤很多，总共有11个步骤，但实际上，需要手动的地方很少，而且没有重复性工作。至于手动的部分，我在下面也单独列举并分析</strong>：</p></blockquote><h4 id="需要手动的地方"><a href="#需要手动的地方" class="headerlink" title="需要手动的地方"></a>需要手动的地方</h4><h5 id="不会打断工作流的："><a href="#不会打断工作流的：" class="headerlink" title="不会打断工作流的："></a>不会打断工作流的：</h5><p>填写config.yaml 与 表中的漏洞基础信息。</p><blockquote><p> [这一步不需要也没必要省略吧]</p></blockquote><p>根据需求，手动调整处理图片的代码。</p><blockquote><p>[默认的三张图片处理不了很多场景，自己调整代码是必须的]</p></blockquote><p>手动删除output_data中的旧的行业信息表与提交过的images.</p><blockquote><p>不自动删除，是因为有可能还会需要。而且不删除理论上不影响下一次漏洞的提交（除非下一次又挖到了同一家公司）</p></blockquote><h5 id="会打断工作流的："><a href="#会打断工作流的：" class="headerlink" title="会打断工作流的："></a>会打断工作流的：</h5><p>通过爱站网批量查询，然后手动添加结果到文件中并进行处理。</p><blockquote><p>[如果有API的话，这一步其实可以更自动。人工处理，根据爱站网响应速度，大约需要1~2分钟]</p></blockquote><p>对行业信息表进行手动处理，把“未知”的省市位置进行手工查询。</p><blockquote><p>行业信息查询，我这里直接使用的Enscan。Enscan是一个对爱企查、天眼查的爬虫。</p><p>然后对它的结果进行一个处理。而Enscan查出来是这样的：</p><p>注册地址：xx市xx区xx中路……金融中心T3栋写字楼41楼</p><p>经营范围一般项目：汽车零配件批发；汽车零配件零售；建筑材料销售；金属材料销售；化工产品销售（不含许可类化工产品）……</p><p>由于注册地址可能只有省份跟街道，直接跳过了市区，所以cpca库不一定能识别，必须要手动纠正。</p><p><strong>如果要进行优化，那么可能要魔改ENSCAN，或者寻找新思路（我看到过一个使用高德地图api的），才能避免手工。</strong></p></blockquote><p>可以看到，会打断工作流的部分其实都有优化空间，不过基于时间和成本的考虑，我认为目前这个版本已经足够高效了。</p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="自动化图片处理系统"><a href="#自动化图片处理系统" class="headerlink" title="自动化图片处理系统"></a>自动化图片处理系统</h4><h5 id="功能简介-实现思路"><a href="#功能简介-实现思路" class="headerlink" title="功能简介&amp;实现思路"></a>功能简介&amp;实现思路</h5><p>生成图片的第一步是创建漏洞文件夹&#x2F;漏洞权重文件夹.这一步需要读取xlsx文件中的”权重”字段与漏洞id字段，进行自动生成。</p><p>接着，该模块默认生成三张图片，分别是：漏洞归属、漏洞主页、POC的请求包与响应包。</p><p><strong>漏洞归属</strong>：读取xlsx文件得到根域名、网站备案&#x2F;许可证号、主办单位，通过PILLOW库将文字转化成图片。</p><p><strong>漏洞主页</strong>：读取xlsx文件得到URL，通过playwright进行异步访问并拍照。</p><p><strong>POC的请求与响应</strong>：读取xlsx文件得到请求包与响应包，通过PILLOW库将文字转化成图片。</p><h5 id="关键代码片段"><a href="#关键代码片段" class="headerlink" title="关键代码片段"></a>关键代码片段</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1:给主页拍照 使用playwright完成</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">capture_website</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    输入:漏洞url主页    输出:主页截图    """</span>    <span class="token comment"># 测试</span>    <span class="token comment">###create_proof_screenshot(next(df.iterrows())[1])</span>    <span class="token comment"># 同步有点慢了,2秒拍一个照片.</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> async_playwright<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>        <span class="token comment"># 启动浏览器（无头模式可设置为 False 查看界面）</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># context 相当于浏览器的配置文件</span>        context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>viewport<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1920</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">1080</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ignore_https_errors<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 并发控制（防止内存溢出）</span>        semaphore <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>               <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">process_url</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">async</span> <span class="token keyword">with</span> semaphore<span class="token punctuation">:</span>                page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>new_page<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    save_dir <span class="token operator">=</span> get_save_dir<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                    id_dir <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>save_dir<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>                    fpath <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>id_dir<span class="token punctuation">&#125;</span></span><span class="token string">/主页2.png"</span></span>                    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>fpath<span class="token punctuation">)</span><span class="token punctuation">:</span>                        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"已存在：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span></span><span class="token string">/主页2"</span></span><span class="token punctuation">)</span>                        <span class="token keyword">return</span>                    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>id_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>id_dir<span class="token punctuation">&#125;</span></span><span class="token string">公司目录不存在！"</span></span><span class="token punctuation">)</span>                        <span class="token keyword">return</span>                                        <span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>stop_max_attempt_number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>wait_fixed<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span>                    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">pagego</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                            <span class="token keyword">await</span> pagego<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">60000</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"网络请求错误: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token keyword">raise</span>                    <span class="token comment"># 唯一文件名（避免覆盖）</span>                    <span class="token keyword">await</span> page<span class="token punctuation">.</span>screenshot<span class="token punctuation">(</span>path<span class="token operator">=</span>fpath<span class="token punctuation">,</span> full_page<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"截图成功：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"截图失败【</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">】: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token keyword">finally</span><span class="token punctuation">:</span>                    <span class="token keyword">await</span> page<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 批量创建任务</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> df<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> process_url<span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'漏洞主页'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'漏洞id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># 并发执行并等待所有任务完成 *传递多个进程</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>        <span class="token keyword">await</span> context<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>          logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"主页截图任务已完成"</span><span class="token punctuation">)</span><span class="token comment"># 统一的图片生成函数</span><span class="token keyword">def</span> <span class="token function">create_text_image</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> output_path<span class="token punctuation">,</span> font_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> line_spacing<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                      bg_color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text_color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_width<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">,</span>                      min_width<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    创建包含文本的图片        参数:        text: 要显示的文本内容        output_path: 输出图片路径        font_size: 字体大小        line_spacing: 行间距        padding: 内边距        bg_color: 背景颜色，RGB元组        text_color: 文字颜色，RGB元组        max_width: 每行最大字符数        min_width: 图片最小宽度    """</span>    font_path <span class="token operator">=</span> <span class="token string">"simhei.ttf"</span>  <span class="token comment"># 使用中文字体</span>    font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>font_path<span class="token punctuation">,</span> font_size<span class="token punctuation">)</span>        <span class="token comment"># 自动换行处理</span>    wrapper <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>TextWrapper<span class="token punctuation">(</span>width<span class="token operator">=</span>max_width<span class="token punctuation">)</span>    wrapped_text <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 计算图片尺寸</span>    draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    text_bbox <span class="token operator">=</span> draw<span class="token punctuation">.</span>multiline_textbbox<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wrapped_text<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> spacing<span class="token operator">=</span>line_spacing<span class="token punctuation">)</span>    text_width <span class="token operator">=</span> text_bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> text_bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    text_height <span class="token operator">=</span> text_bbox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> text_bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        img_width <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>text_width <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>padding<span class="token punctuation">,</span> min_width<span class="token punctuation">)</span>  <span class="token comment"># 确保至少有最小宽度</span>    img_height <span class="token operator">=</span> text_height <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>padding        <span class="token comment"># 创建画布</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>img_width<span class="token punctuation">,</span> img_height<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span>bg_color<span class="token punctuation">)</span>    draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment"># 绘制文字</span>    draw<span class="token punctuation">.</span>multiline_text<span class="token punctuation">(</span>        <span class="token punctuation">(</span>padding<span class="token punctuation">,</span> padding<span class="token punctuation">)</span><span class="token punctuation">,</span>        wrapped_text<span class="token punctuation">,</span>        fill<span class="token operator">=</span>text_color<span class="token punctuation">,</span>        font<span class="token operator">=</span>font<span class="token punctuation">,</span>        spacing<span class="token operator">=</span>line_spacing    <span class="token punctuation">)</span>        <span class="token comment"># 保存图片</span>    img<span class="token punctuation">.</span>save<span class="token punctuation">(</span>output_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h5><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E5%A4%87%E6%A1%88%E4%BE%8B%E5%AD%90.png"></p><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E4%B8%BB%E9%A1%B5%E4%BE%8B%E5%AD%90.png"></p><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/POC%E4%BE%8B%E5%AD%90.png"></p><blockquote><p>图片处理的速度主要看访问首页并截图的速度，每种照片200+张，实际上时间开销大头在访问首页并截图那边，即使异步还是比较慢，每秒大约拍2~3张.【电脑配置好可以修改<code>协程数</code>】</p></blockquote><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E4%B8%80%E6%AC%A1%E6%80%A7%E5%A4%84%E7%90%86%E5%A4%A7%E9%87%8F%E5%9B%BE%E7%89%87.png"></p><h4 id="智能地区与行业匹配"><a href="#智能地区与行业匹配" class="headerlink" title="智能地区与行业匹配"></a>智能地区与行业匹配</h4><h5 id="功能简介-实现思路-1"><a href="#功能简介-实现思路-1" class="headerlink" title="功能简介&amp;实现思路"></a>功能简介&amp;实现思路</h5><p>这个模块是为了适应<code>enscan</code>而存在的，前文提到，enscan会爬取并返回不那么完美的<code>注册地址</code>跟<code>经营范围</code>,所以要对通过模块，对结果进行二次加工。</p><p><strong>地址处理</strong>：通过cpca库，对省市进行识别，并根据漏洞盒子的菜单进行颗粒度对齐。</p><p><strong>行业分类</strong>：通过fuzzywuzzy库，把enscan得到的<code>经营范围</code>与漏洞盒子提供的<code>经营范围</code>进行模糊字符串匹配。</p><h5 id="关键代码片段-1"><a href="#关键代码片段-1" class="headerlink" title="关键代码片段"></a>关键代码片段</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 地址解析函数</span><span class="token keyword">def</span> <span class="token function">parse_address</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    df <span class="token operator">=</span> cpca<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> df<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>        province <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'省'</span><span class="token punctuation">]</span>        city <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'市'</span><span class="token punctuation">]</span>        <span class="token comment"># 直辖市的特殊处理 再加上漏洞盒子的处理</span>        <span class="token comment">#if province.find("北京") or province.find("上海") or province.find("天津") or province.find("重庆"):  find找到返回0 找不到返回-1</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span>  <span class="token string">"市"</span> <span class="token keyword">in</span> province<span class="token punctuation">:</span>                  city <span class="token operator">=</span> province                province <span class="token operator">=</span> province<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"市"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                province <span class="token operator">=</span> province<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"省"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>                city <span class="token operator">=</span> city<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"市"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">if</span> city <span class="token keyword">else</span> <span class="token string">"未知"</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"发生未知错误: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            province <span class="token operator">=</span> <span class="token string">"未知"</span>            city <span class="token operator">=</span> <span class="token string">"未知"</span>        <span class="token comment"># 针对省份中含有自治区之类的</span>        <span class="token keyword">if</span> <span class="token string">"自治"</span> <span class="token keyword">in</span> province<span class="token punctuation">:</span>            province <span class="token operator">=</span> province<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        province <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>province<span class="token punctuation">&#125;</span></span><span class="token string">\""</span></span>        city <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city<span class="token punctuation">&#125;</span></span><span class="token string">\""</span></span>        <span class="token comment">#["广东","深圳"]</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>province<span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span>    <span class="token keyword">return</span> <span class="token string">"未知地区"</span><span class="token comment"># 行业匹配函数</span><span class="token keyword">def</span> <span class="token function">match_industry</span><span class="token punctuation">(</span>business_scope<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 把括号内的垃圾数据清除 【】也要删。</span>    pattern <span class="token operator">=</span> <span class="token string">r'[（(【].*?[）)】]'</span>    business_scope <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> business_scope<span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>        <span class="token comment"># 把左边抽象到右边,此函数中,右边是一个列表</span>    <span class="token keyword">match</span><span class="token punctuation">,</span> score <span class="token operator">=</span> process<span class="token punctuation">.</span>extractOne<span class="token punctuation">(</span>business_scope<span class="token punctuation">,</span> INDUSTRY_MAP<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"最佳粗分匹配得分是:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>score<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">match</span><span class="token operator">=</span><span class="token string">"其他"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"未找到匹配行业"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">match</span> <span class="token comment">#     return best_match if best_match else "其他行业"  三元表达式   值 if 条件 else 值</span><span class="token comment"># 对于给出的/行业,分词再进行一次匹配</span><span class="token keyword">def</span> <span class="token function">deep_match</span><span class="token punctuation">(</span>business_scope<span class="token punctuation">,</span>basic_industry<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 对匹配括号内的内容</span>    pattern_kuohao_match <span class="token operator">=</span> <span class="token string">r'\((.*)\)'</span>    result <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern_kuohao_match<span class="token punctuation">,</span>basic_industry<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">:</span>        basic_industry <span class="token operator">=</span> result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    best_match <span class="token operator">=</span> <span class="token boolean">None</span>    best_score <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 分词,做列表</span>    item <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'\/'</span><span class="token punctuation">,</span> basic_industry<span class="token punctuation">)</span>    best_match<span class="token punctuation">,</span> best_score <span class="token operator">=</span> process<span class="token punctuation">.</span>extractOne<span class="token punctuation">(</span>business_scope<span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"最佳细分匹配得分是:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>best_score<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"最佳细分行业是:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>best_match<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> best_match<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h5><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%E6%B5%8B%E8%AF%95.png"></p><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C.png"></p><h4 id="批量信息采集与处理"><a href="#批量信息采集与处理" class="headerlink" title="批量信息采集与处理"></a>批量信息采集与处理</h4><h5 id="功能简介-实现思路-2"><a href="#功能简介-实现思路-2" class="headerlink" title="功能简介&amp;实现思路"></a>功能简介&amp;实现思路</h5><p>提交漏洞不仅需要报告，还需要很多辅助信息。我的设计思路是通过一张表格&#x2F;input&#x2F;mid-bug.xlsx，集中管理所有必要信息。相比魔改前的版本，现在的表格中大部分字段都是自动化填充的，无需重复操作。</p><p>上文说到了，该工作流启动的基本条件是填写表中的字段：</p><p><strong>URL（漏洞点的url），请求包，响应包，漏洞类型</strong></p><p>工作流函数自动生成<strong>漏洞id,漏洞主页,根域名</strong></p><p>然后根据<code>根域名</code>，<strong>手动</strong>去爱站网批量查询 <strong>权重、备案号、公司(False)</strong>   爱站网的数据不是最新的，所以这里的公司我标注的False，通过爱企查这样的网站才能查出<strong>公司(True)</strong></p><p>工作流调用enscan得到粗略的公司信息，然后调用模糊匹配函数得到具体的公司信息。缺点是“未知”部分需要<strong>手动</strong>查询，原因在上文已经介绍。</p><p>然后工作流会将<code>output/公司信息.xlsx</code> 合并到mid-bug中，并用公司(True)覆盖公司(False)</p><p>最后工作流将带有权重的行删除，保存最终文件。并把带有权重的行 与 当前配置的config.yaml单独导出，以便后面手动提交给补天&#x2F;edu平台。</p><p><strong>虽然步骤看起来不少😅，但这已经是我优化N次的结果了。要实现完全不打断工作流，还需要进一步改进。</strong></p><h5 id="关键代码片段-2"><a href="#关键代码片段-2" class="headerlink" title="关键代码片段"></a>关键代码片段</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">worksheet</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"已加载文件: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">file</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">basic_process</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>process_urls<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root_domain<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>save<span class="token punctuation">(</span>FILE_PATH<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"漏洞id,漏洞主页,根域名以及去重,已处理完成"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_urls</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 添加新列</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'漏洞id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_vulnerability_id<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'漏洞主页'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_homepage<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">_get_vulnerability_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 解析URL</span>        parsed <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># 获取域名（如果有端口号，去掉:符号）</span>        domain <span class="token operator">=</span> parsed<span class="token punctuation">.</span>netloc<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> domain        <span class="token keyword">def</span> <span class="token function">_get_homepage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 解析URL</span>        parsed <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># 重建基础URL（协议 + 域名）</span>        homepage <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>parsed<span class="token punctuation">.</span>scheme<span class="token punctuation">&#125;</span></span><span class="token string">://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>parsed<span class="token punctuation">.</span>netloc<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token keyword">return</span> homepage        <span class="token keyword">def</span> <span class="token function">root_domain</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span>        <span class="token comment"># 创建一个新列表来存储根域名</span>        root_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 遍历URL列,提取根域名</span>        <span class="token keyword">for</span> domain <span class="token keyword">in</span> url<span class="token punctuation">:</span>            extracted <span class="token operator">=</span> tldextract<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span>            root_domain <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>extracted<span class="token punctuation">.</span>domain<span class="token punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>extracted<span class="token punctuation">.</span>suffix<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>            root_domains<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_domain<span class="token punctuation">)</span>        <span class="token comment"># 添加新的"根域名"列</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'根域名'</span><span class="token punctuation">]</span> <span class="token operator">=</span> root_domains        <span class="token comment"># 去重</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token string">'根域名'</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>                    <span class="token comment">#到此为止,只差最后一步,将enscan生成的表,与mid-bug.xlsx进行融合</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 查找output_data目录下的xlsx文件</span>        xlsx_files <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./output_data/*.xlsx'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> xlsx_files<span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"未在output_data目录下找到xlsx文件"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>                    <span class="token comment"># 获取最新xlsx文件</span>        target_file <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>xlsx_files<span class="token punctuation">,</span> key<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"处理文件: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>target_file<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment"># 读取企业信息文件</span>        company_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>target_file<span class="token punctuation">)</span>                <span class="token comment"># 确保必要的列存在</span>        required_columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'企业名称'</span><span class="token punctuation">,</span> <span class="token string">'省市位置'</span><span class="token punctuation">,</span> <span class="token string">'粗分行业'</span><span class="token punctuation">,</span> <span class="token string">'细分行业'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span>col <span class="token keyword">in</span> company_df<span class="token punctuation">.</span>columns <span class="token keyword">for</span> col <span class="token keyword">in</span> required_columns<span class="token punctuation">)</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"企业信息文件中缺少必要的列"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>                <span class="token comment"># 比较两个DataFrame的长度</span>        len_self <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span>        len_company <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>company_df<span class="token punctuation">)</span>        <span class="token keyword">if</span> len_self <span class="token operator">!=</span> len_company<span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"警告：两个表的长度不一致！原表长度: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>len_self<span class="token punctuation">&#125;</span></span><span class="token string">, 企业信息表长度: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>len_company<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"表长度不一致，是否继续处理？(y/n): "</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> user_input<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">:</span>                    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"用户选择终止处理"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token keyword">elif</span> user_input<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">:</span>                    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"用户选择继续处理"</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入 y 或 n"</span><span class="token punctuation">)</span>                <span class="token comment"># 保存原始的列名（标题）</span>        original_title <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 直接替换主办单位名称列的值</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'主办单位名称'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_df<span class="token punctuation">[</span><span class="token string">'企业名称'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">]</span>                <span class="token comment"># 添加新的三列  [:len(self.df)] 是一个切片操作，用于从 company_df 的列中提取与 self.df 行数相同数量的元素。</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'省市位置'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_df<span class="token punctuation">[</span><span class="token string">'省市位置'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'粗分行业'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_df<span class="token punctuation">[</span><span class="token string">'粗分行业'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'细分行业'</span><span class="token punctuation">]</span> <span class="token operator">=</span> company_df<span class="token punctuation">[</span><span class="token string">'细分行业'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">]</span>                logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"至此,企业信息更新完成"</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">save_weight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 找出所有标记为权重的行</span>        weight_df <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">[</span>self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'特殊'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'权重'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weight_df<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"没有找到标记为权重的行"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>                    <span class="token comment"># 从原表中删除权重行</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">[</span>self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'特殊'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'权重'</span><span class="token punctuation">]</span>                <span class="token comment"># 保存权重数据到新文件</span>        weight_file <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"output_data/权重-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'漏洞类型'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">.xlsx"</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            weight_df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>weight_file<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"已将权重数据保存到: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>weight_file<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">"config.yaml"</span><span class="token punctuation">,</span><span class="token string-interpolation"><span class="token string">f"output_data/config-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'漏洞类型'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">.yaml"</span></span><span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"已将config.yaml复制到output_data目录下"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"保存权重数据时出错: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span>                    <span class="token comment"># 保存更新后的原始数据</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>save<span class="token punctuation">(</span>FILE_PATH<span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"已从原表中删除权重数据"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"更新原始数据时出错: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="效果展示-2"><a href="#效果展示-2" class="headerlink" title="效果展示"></a>效果展示</h5><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E4%BA%A7%E5%87%BA%E8%A1%A8-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E5%9B%BE.png"></p><p><img src="/2025/03/05/lou-dong-he-zi-zi-dong-hua-jiao-ben-shen-du-gai-zao-xiao-lu-ti-sheng-10000/%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E7%BB%88%E5%86%85%E5%AE%B9.png"></p><h4 id="漏洞提交优化"><a href="#漏洞提交优化" class="headerlink" title="漏洞提交优化"></a>漏洞提交优化</h4><h5 id="功能简介-实现思路-3"><a href="#功能简介-实现思路-3" class="headerlink" title="功能简介&amp;实现思路"></a>功能简介&amp;实现思路</h5><p>漏洞提交是另外一个主模块，得到完整的mid-bug表、config.yaml文件、图片文件夹后，就可以进行提交漏洞了。</p><p>漏洞提交的大部分功能原本就来自于<a href="https://www.freebuf.com/sectool/419104.html">漏洞盒子批量提交脚本5.1.26 - FreeBuf网络安全行业门户</a>  ，我只做了些小改动：</p><ul><li>修改图片上传的部分逻辑</li><li>上传图片时改用异步以提高效率并添加异常机制，避免退出程序</li><li>增加对XML格式的支持，避免被转义</li></ul><p>关键代码片段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>stop_max_attempt_number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> wait_fixed<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_upload_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""上传图片并返回URL"""</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'正在上传截图:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>image_path<span class="token punctuation">&#125;</span></span><span class="token string">......'</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"图片路径不存在: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>image_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>            files <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'image.png'</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'watermark'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            url<span class="token operator">=</span>API_CONFIG<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            files<span class="token operator">=</span>files<span class="token punctuation">,</span>            cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">,</span>            timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            verify<span class="token operator">=</span><span class="token boolean">False</span>        <span class="token punctuation">)</span>        img_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                <span class="token keyword">if</span> img_data<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'success'</span><span class="token punctuation">:</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"图片上传成功"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'&lt;img alt="image.png" src="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>img_data<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">">'</span></span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"图片上传失败: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>img_data<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"图片上传异常: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>             <span class="token keyword">def</span> <span class="token function">_process_text_replacements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">,</span> content_list<span class="token punctuation">,</span> bug_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""处理文本中的占位符替换"""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 匹配图片、URL网络位置、协议的正则</span>        pattern_img <span class="token operator">=</span> <span class="token string">r'\&#123;images([0-9])\&#125;'</span>        pattern_netloc <span class="token operator">=</span> <span class="token string">r'\&#123;netloc\&#125;'</span>        pattern_scheme <span class="token operator">=</span> <span class="token string">r'\&#123;scheme\&#125;'</span>        pattern_html <span class="token operator">=</span> <span class="token string">r'&lt;code class=\\"Bash\\">(.*?)&lt;\/code>'</span>                netloc <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>bug_url<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc        scheme <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>bug_url<span class="token punctuation">)</span><span class="token punctuation">.</span>scheme                <span class="token keyword">def</span> <span class="token function">replace_images</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            index <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content_list<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> content_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>            <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">def</span> <span class="token function">escape_content</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            inner_content <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            escaped <span class="token operator">=</span> inner_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'&lt;code class="\\Bash\\"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>escaped<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/code>'</span></span>                <span class="token comment"># 应用所有替换</span>        text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern_img<span class="token punctuation">,</span> replace_images<span class="token punctuation">,</span> text<span class="token punctuation">)</span>        text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern_netloc<span class="token punctuation">,</span> netloc<span class="token punctuation">,</span> text<span class="token punctuation">)</span>        text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern_scheme<span class="token punctuation">,</span> scheme<span class="token punctuation">,</span> text<span class="token punctuation">)</span>        text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern_html<span class="token punctuation">,</span> escape_content<span class="token punctuation">,</span> text<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>                <span class="token keyword">return</span> text    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"文本替换处理异常: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后台核心逻辑"><a href="#后台核心逻辑" class="headerlink" title="后台核心逻辑"></a>后台核心逻辑</h4><h5 id="功能简介-实现思路-4"><a href="#功能简介-实现思路-4" class="headerlink" title="功能简介&amp;实现思路"></a>功能简介&amp;实现思路</h5><p>由于在工作流中经常需要手动处理文件，而且需要进行的网络请求也挺多的，<strong>断点重连功能</strong>是必不可少的。</p><p>这里的实现比较简单，就是用一个文件记录每次运行时的执行状态，经过检查点时保存当前状态，如果完整运行那就删除该文件。</p><h5 id="关键代码片段-3"><a href="#关键代码片段-3" class="headerlink" title="关键代码片段"></a>关键代码片段</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>STATE_FILE<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>STATE_FILE<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">return</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment"># 如果文件不存在，创建一个初始状态文件</span>    initial_state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"last_completed_step"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>STATE_FILE<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>initial_state<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    <span class="token keyword">return</span> initial_state<span class="token keyword">def</span> <span class="token function">save_state</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>STATE_FILE<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"last_completed_step"</span><span class="token punctuation">:</span> step<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 加载上次执行状态</span>    state <span class="token operator">=</span> load_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    last_step <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">"last_completed_step"</span><span class="token punctuation">]</span>        <span class="token comment"># 创建worksheet实例</span>    w <span class="token operator">=</span> worksheet<span class="token punctuation">(</span>FILE_PATH<span class="token punctuation">)</span>        <span class="token comment"># 根据上次执行状态决定从哪里开始</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> last_step<span class="token punctuation">:</span>        <span class="token comment"># 然后进行备案号等处理,这里手动完成</span>        w<span class="token punctuation">.</span>basic_process<span class="token punctuation">(</span><span class="token punctuation">)</span>        w<span class="token punctuation">.</span>wait_for_user_action<span class="token punctuation">(</span><span class="token string">"域名信息"</span><span class="token punctuation">)</span>        save_state<span class="token punctuation">(</span><span class="token string">"domain_info"</span><span class="token punctuation">)</span>        enscan<span class="token punctuation">(</span><span class="token punctuation">)</span>        save_state<span class="token punctuation">(</span><span class="token string">"enscan"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> last_step <span class="token operator">==</span> <span class="token string">"domain_info"</span><span class="token punctuation">:</span>        enscan<span class="token punctuation">(</span><span class="token punctuation">)</span>        save_state<span class="token punctuation">(</span><span class="token string">"enscan"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> last_step <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"domain_info"</span><span class="token punctuation">,</span> <span class="token string">"enscan"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        w<span class="token punctuation">.</span>wait_for_user_action<span class="token punctuation">(</span><span class="token string">"模糊匹配修正"</span><span class="token punctuation">)</span>          save_state<span class="token punctuation">(</span><span class="token string">"fuzzy_match"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> last_step <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"domain_info"</span><span class="token punctuation">,</span> <span class="token string">"enscan"</span><span class="token punctuation">,</span> <span class="token string">"fuzzy_match"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 合并企业信息</span>        w<span class="token punctuation">.</span>company_info<span class="token punctuation">(</span><span class="token punctuation">)</span>        save_state<span class="token punctuation">(</span><span class="token string">"company_info"</span><span class="token punctuation">)</span>        w<span class="token punctuation">.</span>save<span class="token punctuation">(</span>FILE_PATH<span class="token punctuation">)</span>    <span class="token keyword">if</span> last_step <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"domain_info"</span><span class="token punctuation">,</span> <span class="token string">"enscan"</span><span class="token punctuation">,</span> <span class="token string">"fuzzy_match"</span><span class="token punctuation">,</span> <span class="token string">"company_info"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 截图</span>        photo_main<span class="token punctuation">(</span><span class="token punctuation">)</span>        save_state<span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> last_step <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"domain_info"</span><span class="token punctuation">,</span> <span class="token string">"enscan"</span><span class="token punctuation">,</span> <span class="token string">"fuzzy_match"</span><span class="token punctuation">,</span> <span class="token string">"company_info"</span><span class="token punctuation">,</span> <span class="token string">"photo"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 提取权重数据</span>        w<span class="token punctuation">.</span>save_weight<span class="token punctuation">(</span><span class="token punctuation">)</span>        save_state<span class="token punctuation">(</span><span class="token string">"weight"</span><span class="token punctuation">)</span>    <span class="token comment"># 完成所有步骤后清除状态文件</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>STATE_FILE<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>STATE_FILE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="To-Do"><a href="#To-Do" class="headerlink" title="To-Do"></a>To-Do</h3><p>这个项目还有很多可以改进的地方，下面是我的To-Do列表</p><p><strong>□界面美化</strong>：通过CSS，给漏洞主页截图带上<code>地址栏</code>，让截图更贴近真实浏览体验</p><p><strong>□权重公司优化</strong>：改进对权重公司的处理流程，让图片与config.yaml配置更加便于手动提交</p><p><strong>□全自动化升级</strong>：通过API或其他方式自动查询权重、备案号、公司信息，实现完全自动化</p><p><strong>□代码重构</strong>：优化脚本结构，提高可维护性和扩展性</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞盒子 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当我试图用代码连接所有渗透工具时，发生了什么</title>
      <link href="/2025/03/05/dang-wo-shi-tu-yong-dai-ma-lian-jie-suo-you-shen-tou-gong-ju-shi-fa-sheng-liao-shi-me/"/>
      <url>/2025/03/05/dang-wo-shi-tu-yong-dai-ma-lian-jie-suo-you-shen-tou-gong-ju-shi-fa-sheng-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<p>排队中…</p><p>1.11 - 1.29</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《从入门到放弃：反连平台的搭建与技术本质》</title>
      <link href="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/"/>
      <url>/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/</url>
      
        <content type="html"><![CDATA[<p>最近在使用nuclei的poc探测资产时，遇到了”未找到变量 <code>interactsh-url</code>“的错误提示，导致poc利用失败；而使用Yakit探测资产时，虽然响应包的字段明确表示已探测到漏洞，但反连平台却毫无反应。经过几天的深入研究，我终于理清了”反连平台”的概念与实践要点。</p><p>本文中所讨论的反连平台均指DNS反连平台。</p><style>    @keyframes rainbow { /* 新增动画关键帧 */        0% { background-position: 0% 50%; }        50% { background-position: 100% 50%; }        100% { background-position: 0% 50%; }    }    .superlight {        font-weight: bold;        background: linear-gradient(45deg,             #ff0000, #ff7f00, #ffff00, #00ff00,            #0000ff, #4b0082, #9400d3);        background-size: 400% 400%;        animation: rainbow 5s ease infinite;        -webkit-background-clip: text;  /* 兼容webkit内核 */        background-clip: text;          /* 新增标准属性 */        color: transparent;             /* 保持文字透明 */    }</style><h2 id="为什么连不上反连平台？"><a href="#为什么连不上反连平台？" class="headerlink" title="为什么连不上反连平台？"></a>为什么连不上反连平台？</h2><p>通过实践和参考一些技术文章后，我发现了一个关键事实：<strong>网络上公用的、知名的反连平台，已经被企业甚至国家列入了黑名单。</strong></p><p><a href="https://www.freebuf.com/sectool/343401.html">技术 | 关于Antenna的隐匿性部署 - FreeBuf网络安全行业门户</a></p><p>例如，对于nuclei的官方反连平台<code>*.oast.*</code>，在中国部分地区已无法连接，这正是我使用nuclei时出现”未找到变量 <code>interactsh-url</code>“的根本原因。</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E5%AE%98%E6%96%B9%E5%B9%B3%E5%8F%B0%E8%B6%85%E6%97%B6.png"></p><blockquote><p>来自官方的建议：</p></blockquote><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E5%AE%98%E6%96%B9%E5%91%BC%E5%90%81.png"></p><p>由于我习惯使用nuclei进行探测工作，因此我开始着手解决无法连接官方反连平台的问题，并构想了几种可行的解决方案。</p><h2 id="下策：更换反连平台变量，让自身可以连接"><a href="#下策：更换反连平台变量，让自身可以连接" class="headerlink" title="下策：更换反连平台变量，让自身可以连接"></a>下策：更换反连平台变量，让自身可以连接</h2><p>前面提到，我无法连接反连平台是因为nuclei官方反连在中国部分地区被墙了。那么，我是否可以通过修改变量，更换到一个可用的反连平台呢？</p><p>在nuclei的模板中，我们使用<code>&#123;&#123;interactsh-url&#125;&#125;</code>来指定此poc需要使用的反连平台，我们可以将<code>&#123;&#123;interactsh-url&#125;&#125;</code>修改为自定义变量，例如<code>&#123;&#123;interactsh&#125;&#125;</code>，然后添加配置：</p><pre class="line-numbers language-none"><code class="language-none">variables:  interactsh: test.eyes.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，我们就成功指定了一个可用的反连平台。</p><p>虽然这个下策解决了我们自身无法连接反连平台的问题，但目标服务器仍有可能无法连接反连平台。</p><p>更严重的是，这导致了一个新问题：nuclei只与使用interactsh搭建且使用<code>&#123;&#123;interactsh-url&#125;&#125;</code>作为变量的反连平台有联动。如果自创一个变量，以下这类响应判断就完全失效了：</p><pre class="line-numbers language-none"><code class="language-none">matchers:  - type: word    part: interactsh_protocol    words:      - &quot;dns&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这意味着nuclei与反连平台之间失去了联系，即使反连平台被ping通，nuclei也不会有任何反应。</p><p>更何况，要采用这种方法，就必须修改所有模板中的<code>&#123;&#123;interactsh-url&#125;&#125;</code>变量，下策之所以被称为下策确实有其道理所在😅</p><h2 id="中策：开启tun模式，让自身连接反连平台"><a href="#中策：开启tun模式，让自身连接反连平台" class="headerlink" title="中策：开启tun模式，让自身连接反连平台"></a>中策：开启tun模式，让自身连接反连平台</h2><p>既然中国网络连不上nuclei官方反连平台，那开启代理不就解决问题了吗？经过测试，我发现在nuclei中通过-proxy参数指定代理是无效的，我们的请求并不会通过代理去访问反连平台，因此需要选择一种能够强制所有流量走代理的模式。</p><p>在clash中，TUN模式通过创建一张虚拟网卡，在网络层处理所有请求。如果使用其他工具，可能需要自行研究适配方法。总之，使用clash的TUN模式可以简单高效地让nuclei正常使用官方反连平台。</p><p>但问题依然存在：如果目标服务器限制了对官方反连平台的ping请求，我们可能会错过发现潜在漏洞的机会。</p><h2 id="上策：自建反连平台"><a href="#上策：自建反连平台" class="headerlink" title="上策：自建反连平台"></a>上策：自建反连平台</h2><h3 id="前置篇：服务器与域名"><a href="#前置篇：服务器与域名" class="headerlink" title="前置篇：服务器与域名"></a>前置篇：服务器与域名</h3><p>自建反连平台需要一台服务器和至少一个域名。</p><p>经过一番折腾，我将踩到的坑总结如下：</p><p>①：如果服务器或域名有一个在国内，那就必须备案。</p><p><a href="https://linux.do/t/topic/11694/35?page=2">腾讯云VPS能否绕过备案 - 开发调优 - LINUX DO</a></p><p>试图打擦边球只会让事情变得更加复杂。</p><p>因此，我的域名与服务器均选择了国外的资源。</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>最终我选择在<code>godaddy</code>购买域名，第一年仅需10元左右。</p><p>有一种方案是选择免费域名，但可能会遇到<code>跑路/薅羊毛时间结束/需要绑定外汇卡/无法托管到cf/审核时间长</code>等问题。折腾一番后还是决定付费购买😅</p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>最终在<code>RackNerd</code>购买，第一年费用约$11。</p><p>关于免费服务器：我也曾尝试过一些方案，例如<code>hax.co.id</code>这类需要看广告、每周签到续费的ipv6服务器，但遇到了<code>即使切ie模式依旧显示请禁用广告拦截器/申请不了/需要外汇卡/被薅秃了</code>等问题。最终无法战胜这些障碍，只能选择付费方案。</p><p>踩到的坑：cloudcone。最初我被它的按小时计费模式吸引（只要一周内关闭服务器即可控制成本），但实际使用时发现，分配的IP地址有较大几率被长城防火墙屏蔽，想要获得可用IP要么付费申请，要么不断尝试重新分配。就这样被坑了$5😭</p><p>其他选择：超级便宜的”小鸡”服务器。在服务器领域，有一个词汇叫做<code>小鸡</code>，它们是从主服务器——<code>母鸡</code>上被”生”下来的，缺点是配置较差，需要共用IP与流量，优点是价格极为便宜。例如在淘宝上，我找到了5元&#x2F;年的<code>小鸡</code>服务器，虽然需要实名与被监管，但服务器在国外，不需要备案，这或许是值得考虑的方向。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>为什么上策要最后才提及呢？<strong>因为上策是需要真金白银的😅</strong></p><p>这也解释了为什么，即使从一开始我就知道上策能够彻底解决问题，但仍选择了各种曲折的解法，去探索白嫖的可能性。但很显然，白嫖之路充满了坎坷和挑战。<span class=superlight>[文末有彩蛋]</span></p><blockquote><p>基础前言:</p><p>interactsh是nuclei指定的反连平台，使用它并配置漏洞模板，就能在探测时将响应目标显示在nuclei上。</p><p>interactsh分为客户端和服务端两部分。服务端作为DNS服务器，负责记录请求；客户端则连接服务端，从中拉取属于自己子域名的请求记录。一个通常的部署方案是：在服务器上部署服务端；在需要时，在本地机器上开启客户端并连接到服务端。</p></blockquote><h4 id="为什么说反连平台不能隐藏"><a href="#为什么说反连平台不能隐藏" class="headerlink" title="为什么说反连平台不能隐藏"></a>为什么说反连平台不能隐藏</h4><p>最初对反连平台的部署缺乏深入了解，看到以下两篇文章后，我决定部署一个”高匿名”的反连平台，却不知道这里面暗藏巨坑。</p><p><a href="https://forum.butian.net/share/1055">奇安信攻防社区-0成本快速创建高匿HTTP&#x2F;DNS LOG</a></p><p><a href="https://www.freebuf.com/sectool/343401.html">技术 | 关于Antenna的隐匿性部署 - FreeBuf网络安全行业门户</a></p><p>由于我之前对<code>DNS解析</code>理解不深，在部署过程中配置A记录、NS记录时折腾了很长时间，犯了一些错误。实际部署效果未达预期，我也在reddit、discord和各搜索引擎上尝试寻找解决方案，却始终未能解决我的疑惑。最终通过学习<code>DNS解析</code>、<code>ICMP</code>和<code>DNS粘合记录</code>等知识点，才理解了问题的本质。</p><p>在此我不打算详述整个探索过程，<strong>而是直接指出这两篇文章的关键错误之处：</strong></p><p><strong>首先，反连平台为什么需要隐藏？</strong></p><p>当你ping一个地址，例如<code>ping log.test.com</code>时，系统会先进行DNS解析，获取log.test.com的IP地址；然后进行ICMP发包，源地址是你的主机，目标地址是解析出的IP地址。</p><p>显然，这里的log.test.com的IP地址就是你的DNS服务器地址。当你在对方服务器上执行<code>ping log.test.com</code>时，对方能够找到你的DNS服务器。</p><p>那么，按照上述两篇文章所说，我们能否利用CDN服务，把log.test.com的IP地址隐藏起来呢？</p><p><strong>答案是不能。</strong></p><p>一个错误的理解模型是这样的：</p><p>你的主机 → cf_ip → DNS服务器ip</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E5%81%87dns%E8%A7%A3%E6%9E%90.png"></p><p>假设ping log.test.com时，可以让CloudFlare作为反向代理，接收ping命令，然后由CF将ping命令传递给DNS服务器。这样，对方主机只能知道CF的IP，而无法获知DNS服务器的真实IP。</p><p>但实际情况是：</p><p>你的主机 → cf_ip X DNS服务器ip</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E7%9C%9Fdns%E8%A7%A3%E6%9E%90.png"></p><p><strong>CDN只能代理HTTP&#x2F;HTTPS流量，它的一个主要作用就是防止DDOS攻击，怎么会把ping命令转发给被它保护的主机呢？</strong></p><p>所以，不设置CDN时，ping log.test.com会让你的DNS服务器收到对方的ping命令，对方也能获知你的DNS服务器地址。</p><p>而设置CDN后，你的DNS服务器接收不到ping命令，对方只能获知CF的IP地址，此时对方实际上ping的是CF的IP。</p><h4 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h4><p>虽然CDN无法传递ICMP包，那么自建一个反向代理是否可行呢？技术上应该是可行的，但缺少了大公司的”障眼法”，当A、B服务器都归你所有时，反代与否似乎意义不大。也许可以在”肉鸡”上建立反向代理，增加跳转次数，降低被追踪的风险？</p><p>另外，切记DNS服务器上不要部署个人博客😅 一旦被溯源就难以抵赖了。</p><h4 id="Interactsh官方教程"><a href="#Interactsh官方教程" class="headerlink" title="Interactsh官方教程"></a>Interactsh官方教程</h4><p>下面让我们按照官方教程，建立一个interactsh反连平台：</p><p><a href="https://github.com/projectdiscovery/interactsh#interactsh-server">projectdiscovery&#x2F;interactsh：一个 OOB 交互收集服务器和客户端库 — projectdiscovery&#x2F;interactsh: An OOB interaction gathering server and client library</a></p><blockquote><p>以 GoDaddy 为例：</p><p>添加 → 提交 ns1，ns2 使用您的 SERVER_IP 作为值</p><p>更改域名服务器 → 我将使用自己的域名服务器 → 提交 ns1.INTERACTSH_DOMAIN, ns2.INTERACTSH_DOMAIN</p></blockquote><h5 id="原理部分："><a href="#原理部分：" class="headerlink" title="原理部分："></a>原理部分：</h5><p>更深入地说，首先了解DNS解析的部分流程：</p><p>根域名服务器(.) → 顶级域名服务器(com) → 权威域名服务器(ns.test.com) → 服务器IP地址</p><p>假设我们有一个域名test.com，然后将ns1.test.com和ns2.test.com设置为我们的<code>权威域名服务器</code>。</p><p>这时出现一个问题：访问ns1.test.com实际上无法解析到我们的服务器IP，因为顶级域名服务器会将ns1.test.com这个域名交给ns1.test.com的权威域名服务器处理，也就是它自己——ns1.test.com。</p><p>这就形成了死循环，顶级域名服务器无法正确处理。这就是为什么需要第一步中的DNS HOSTS设置。这种技术被称为<strong>粘合记录（glue records）</strong>。</p><blockquote><p>这些记录通常在父域名服务器中设置，确保任何尝试查找子域名服务器地址的请求都能获得正确的IP地址，从而解析该子域的记录。</p><p>例如，如果有一个名为”ns1.example.com”的名称服务器负责”example.com”，那么在.com的顶级域名服务器（TLD）中就需要有一个Glue record来指明”ns1.example.com”的IP地址。没有Glue records，任何尝试解析example.com域名下记录的请求都将因缺乏起始点而失败。</p></blockquote><p>我的理解是，Godaddy这类域名注册商在<code>顶级域名服务器</code>上设置了一条类似于A记录的<strong>粘合记录</strong>：</p><p>ns1.example.com → 你的服务器IP</p><p>这样，顶级域名服务器就能通过ns1.test.com找到你的服务器IP地址。</p><p>按照教程配置好并运行后，interactsh-server的运行界面如下：</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E5%AE%98%E6%96%B9%E9%85%8D%E7%BD%AE-%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0%E5%90%AF%E5%8A%A8.png"></p><p>HTTP页面如下：</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0-http%E9%A1%B5%E9%9D%A2.png"></p><p>这里我建议修改<code>默认页面</code>，比如我改成了HelloWorld，因为fofa等平台会收录这个指纹。【这也是后面彩蛋篇的灵感来源】</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/Hello_World.png"></p><blockquote><p>关于CF与interactsh的补充说明：</p><p>前面提到CF无法隐藏DNS服务器，但它能隐藏HTTP流量。例如访问log.test.com时可以获得CDN的隐藏效果（虽然意义不大）。</p><p>但是！我测试发现，Nuclei会因为证书问题导致无法访问自己的DNS服务器。即使在使用interactsh时添加-sa参数忽略https检查，也只是不建立SSL证书，nuclei依然无法连接。</p><p>总之，为DNS反连平台配置CDN纯属费力不讨好。</p></blockquote><h4 id="反连平台的使用"><a href="#反连平台的使用" class="headerlink" title="反连平台的使用"></a>反连平台的使用</h4><p>关于使用方法，推荐阅读以下文章，重点在于理解<strong>反连服务器</strong>与<strong>客户端</strong>之间的交互方式：</p><p><a href="https://jacobriggs.io/blog/posts/how-to-integrate-nuclei-with-interactsh-and-notify-31">如何将 Nuclei 与 Interactsh 和 Notify 集成 - Jacob Riggs | 博客 — How to integrate Nuclei with Interactsh and Notify - Jacob Riggs | Blog</a></p><h3 id="Yakit反连平台"><a href="#Yakit反连平台" class="headerlink" title="Yakit反连平台"></a>Yakit反连平台</h3><p>Yakit的漏洞管理功能更符合我的需求，而且由于Yakit官方的DNS反连平台教程存在一些问题，在此也简要说明。</p><p>Yakit的反连平台名为Yak Bridge。</p><p>①：官方教程中没有明确指出<code>DNS反连</code>需要配置额外参数。</p><p><a href="https://yaklang.io/docs/intro">页面未找到 | Yak 程序语言 — Yak：致力于安全能力融合的语言 | Yak Program Language </a> 这是官网教程。</p><p>它引导用户访问 <a href="https://github.com/yaklang/yak-bridge-docker">yaklang&#x2F;yak-bridge-docker: 如何在公网上使用 yak bridge？（适用于 Yakit 反向服务器） — yaklang&#x2F;yak-bridge-docker: How to use yak bridge in public net ? (For Yakit Reverse Server)</a></p><p>但这个GitHub项目的使用教程非常简陋。</p><p><a href="https://zhuanlan.zhihu.com/p/544964782">想拥有自己的 Yak Bridge？ DNSLog、ICMPLog、TCPLog 全部免费 - 知乎</a> 这是<strong>更有价值的</strong>官方知乎教程。</p><p><code>docker run -it --rm --net=host v1ll4n/yak-bridge yak bridge --secret &#123;可选&#125; --dnslog --domain &#123;your_domain&#125;</code> 使用dnslog时，必须添加–dnslog参数和–domain参数。该教程还详细介绍了Yakit使用DNSlog时的配置方法。</p><p>②：Yak Bridge并不像Interartsh那样周到，它留下了53端口问题。</p><p><a href="https://forum.butian.net/share/1055">奇安信攻防社区-0成本快速创建高匿HTTP&#x2F;DNS LOG</a></p><p>文末提供了53端口问题的解决方案。</p><h2 id="扩展篇——DNS污染"><a href="#扩展篇——DNS污染" class="headerlink" title="扩展篇——DNS污染"></a>扩展篇——DNS污染</h2><p>前文提到企业和国家可能通过DNS污染等技术使域名无法解析，那么这具体是如何实现的呢？</p><p>一个完整的DNS解析流程大致如下：</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/dns%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.png"></p><p>（这里缺少了本地HOSTS文件与DNS缓存的部分）</p><p>如果是域名注册商、云服务器提供者或ISP（如电信等），如何使某个域名无法解析？</p><p>访问者 | 危险域名 | ISP等</p><p>ISP修改本地DNS服务器配置：本地DNS服务器通常由ISP默认分配。如果访问该网站的用户修改了本地DNS服务器，这种方法就失效了，因此实用性不高。</p><p>ISP修改权威域名服务器配置：DNS服务器遍布全球，国内外都有，ISP无法修改全球所有的DNS服务器配置。</p><p>通过防火墙进行DNS污染：</p><h3 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h3><p>由于常规DNS查询没有任何认证机制，且DNS查询通常基于无连接不可靠的UDP协议，<strong>查询者只能接受最先到达的格式正确的结果，而丢弃之后收到的结果。</strong></p><blockquote><p>你的设备只认第一个返回的DNS解析结果，因此只需要在传输路径上设置一个拦截点，检测到指定域名的DNS解析请求时，立即伪造一份假响应发送给你。由于是在中间路径提前发送的，所以会比正确结果更快到达你的设备。</p><p>为确保DNS污染的有效性，负责污染的设备必须离你和全国网民足够近，而运营商就是最佳选择。国内运营商都是国企，本身就是防火墙体系的组成部分，包括国内各大互联网公司也都参与其中。</p><p>除了国家级防火墙，各地运营商也有自己的黑名单，例如移动的”墙中墙”就很出名。此外，反诈劫持也是由地方相关部门将域名提交给当地运营商来实施劫持的。因此，即使没有大防火墙，运营商也一直在进行DNS污染&#x2F;劫持&#x2F;抢答这类行为。</p></blockquote><p>一条未经证实的信息表明，修改<code>长城防火墙的配置</code>即可实现对特定危险域名的DNS污染，而原理就是这个<code>防火墙</code>离你更近，它检测到你的包之后，就会抢先一步发给你一个错误的包。</p><h2 id="彩蛋篇"><a href="#彩蛋篇" class="headerlink" title="彩蛋篇"></a><span class=superlight>彩蛋篇</span></h2><p>在部署反连平台的过程中，我对interactsh的理解越来越深入。正如前文所述，interactsh分为客户端与服务端，那么，我们是否可以用自己的<code>客户端</code>连接别人的<code>服务端</code>呢？</p><p>开启自己的客户端与服务端，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">interactsh-client <span class="token parameter variable">-s</span> kazike.online    <span class="token comment">#在自己主机上开启</span>./interactsh-server <span class="token parameter variable">-domain</span> kazike.online <span class="token parameter variable">-auth</span> -http-index banner.html <span class="token parameter variable">-t</span> <span class="token punctuation">&#123;</span>token<span class="token punctuation">&#125;</span> <span class="token parameter variable">-sa</span><span class="token comment"># 在服务器上开启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务端开启了认证模式，同时关闭https模式以方便抓包。客户端分两次连接，一次无token，一次有token，用WireShark抓包，结果如下：</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E6%97%A0%E8%AE%A4%E8%AF%81%E5%8F%91%E5%8C%85.png"></p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E6%97%A0%E8%AE%A4%E8%AF%81%E5%8F%91%E5%8C%85%E7%BB%93%E6%9E%9C.png"></p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E6%9C%89%E8%AE%A4%E8%AF%81%E5%8F%91%E5%8C%85.png"></p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E6%9C%89%E8%AE%A4%E8%AF%81%E5%8F%91%E5%8C%85%E7%BB%93%E6%9E%9C.png"></p><p>从中可以看出，流程为：携带一系列数据与可选的Authorization请求头访问&#x2F;register接口；返回结果为401或200。</p><p>于是我在fofa上搜索<code>body=&quot;Interactsh Server&quot; &amp;&amp; host!=&quot;oast&quot; &amp;&amp; is_domain=true</code>，获得了1000+个网站。</p><p>用Yakit发送请求测试：</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E4%B8%80%E4%B8%AA%E5%A4%A7%E7%BD%91%E6%8D%9E%E4%B8%8B%E5%8E%BB.png"></p><p>由于我没有添加请求体，所以返回400表示该服务器没有启用认证。在1000+服务器中约有一半不可访问，70+没有启用认证。</p><p>将这70+个域名导入微步进行筛选，去除被判定为危险域名的，还剩60+个可用域名。</p><p>于是我们就可以用自己的<code>客户端</code>，去连接这些没有密码的<code>服务端</code>了。让别人去ping这个域名，我们的客户端也能接收到消息😋 </p><p>这样也算是白嫖成功了🤤 不过为避免沾染因果，还是建议自行部署反连平台。</p><p><img src="/2025/03/05/cong-ru-men-dao-fang-qi-fan-lian-ping-tai-de-da-jian-yu-ji-zhu-ben-zhi/%E7%99%BD%E5%AB%96%E6%88%90%E5%8A%9F.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 反连平台 </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《白嫖FOFA的终极指南：代理池轮询技术详解》</title>
      <link href="/2025/03/05/bai-piao-fofa-de-zhong-ji-zhi-nan-dai-li-chi-lun-xun-ji-zhu-xiang-jie/"/>
      <url>/2025/03/05/bai-piao-fofa-de-zhong-ji-zhi-nan-dai-li-chi-lun-xun-ji-zhu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>排队中…</p><p>1.28~1.29</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
